# В этой главе в игру Alien Invasion будут добавлены пришельцы. Сначала мы добавим одного пришельца
# у верхнего края экрана, а потом сгенерируем целый
# флот. Пришельцы будут перемещаться в сторону и вниз; при этом пришельцы,
# в которых попадают пули, исчезают с экрана. Наконец, мы ограничим количество кораблей у игрока,
# так что при гибели последнего корабля игра завершается.
# В этой главе вы узнаете больше о Pygame и о ведении крупного проекта. Вы
# также научитесь обнаруживать коллизии (столкновения) игровых объектов,
# например пуль и пришельцев. Обнаружение коллизий помогает определять
# взаимодействия между элементами игры: например, ограничить перемещение
# персонажа областью между стенами лабиринта или организовать передачу мяча
# между двумя персонажами. Работа будет продолжаться на основе плана, к которому мы будем время от времени возвращаться,
# чтобы не отклоняться от цели
# во время написания кода.
# Итак, прежде чем браться за новый код для добавления флота пришельцев на экран,
# рассмотрим проект и обновим план.

# Анализ проекта

# Приступая к новой фазе разработки крупного проекта, всегда полезно вернуться
# к исходному плану и уточнить, чего же вы хотите добиться в том коде, который
# собираетесь написать. В этой главе мы:
#  Проанализируем код и определим, нужно ли провести рефакторинг перед реализацией новых возможностей.
#  Добавим в левом верхнем углу экрана одного пришельца, отделив его от краев
# экрана интервалами.
#  По величине интервалов вокруг первого пришельца и общим размерам экрана
# вычислим, сколько пришельцев поместится на экране. Для создания пришельцев, заполняющих верхнюю часть экрана, будет
# написан цикл.
#  Организуем перемещение флота пришельцев в сторону и вниз, пока весь флот
# не будет уничтожен, пока пришелец не столкнется с кораблем игрока или пока
# пришелец не достигнет земли. Если весь флот будет уничтожен, программа
# создает новый флот. Если пришелец сталкивается с кораблем или с землей,
# программа уничтожает корабль и создает новый флот.Создание пришельца 257
#  Ограничим количество кораблей, которые могут использоваться игроком, и завершим игру в конце последней попытки.
# Этот план будет уточняться по мере реализации новых возможностей, но для начала и этого достаточно.
# Также проводите анализ кода, когда вы начинаете работу над новой серией возможностей проекта. Так как с каждой
# новой фазой проект обычно становится
# более сложным, лучше всего заняться расчисткой излишне громоздкого или неэффективного кода. И хотя сейчас особой
# расчистки не потребуется, потому что
# мы уже проводили промежуточный рефакторинг, необходимость использовать
# мышь для закрытия игры каждый раз, когда потребуется протестировать новую
# функцию, раздражает. Добавим возможность быстрого завершения игры при нажатии клавиши Q:

# game_functions.py

# def check_keydown_events(event, ai_settings, screen, ship, bullets):
# ...
# elif event.key == pygame.K_q:
# sys.exit()
# В check_keydown_events() добавляется новый блок, который завершает игру при
# нажатии клавиши Q. Это довольно безопасное изменение, потому что клавиша Q
# находится достаточно далеко от клавиш со стрелками и пробела, так что вероятность случайного нажатия Q и
# завершения игры невелика. Теперь при тестировании игру можно закрыть клавишей Q, не прибегая к использованию мыши.

# --------------------------------------------------------------------------------------------------------------------

# Создание пришельца
#
# Размещение одного пришельца на экране мало чем отличается от размещения
# корабля. Поведением каждого пришельца будет управлять класс с именем Alien,
# который по своей структуре очень похож на класс Ship. Для простоты мы снова воспользуемся готовыми
# графическими изображениями. Вы можете найти

# Создание класса Alien
#
# Теперь можно написать класс Alien:
#
# alien.py
#
# import pygame
# from pygame.sprite import Sprite
# class Alien(Sprite):
# """Класс, представляющий одного пришельца."""
# def __init__(self, ai_settings, screen):
# """Инициализирует пришельца и задает его начальную позицию."""
# super(Alien, self).__init__()
# self.screen = screen
# self.ai_settings = ai_settings
# # Загрузка изображения пришельца и назначение атрибута rect.
# self.image = pygame.image.load('images/alien.bmp')
# self.rect = self.image.get_rect()
# # Каждый новый пришелец появляется в левом верхнем углу экрана.
# 	 self.rect.x = self.rect.width
# self.rect.y = self.rect.height
# # Сохранение точной позиции пришельца.
# self.x = float(self.rect.x)
# def blitme(self):
# """Выводит пришельца в текущем положении."""
# self.screen.blit(self.image, self.rect)

# В основном этот класс похож на класс Ship (если не считать размещения пришельца).
# Изначально каждый пришелец размещается в левом верхнем углу экрана, при
# этом слева от него добавляется интервал, равный ширине пришельца, а над ним —
# интервал, равный высоте 

# -------------------------------------------------------------------------------------------------------------------

# Создание экземпляра Alien

# Создадим экземпляр Alien в alien_invasion py:
# alien_invasion.py
# ...
# from ship import Ship
# from alien import Alien
# import game_functions as gf

# def run_game():
# ...
# # Создание пришельца.
# alien = Alien(ai_settings, screen)
# # Запуск основного цикла игры.
# while True:
# gf.check_events(ai_settings, screen, ship, bullets)
# ship.update()
# gf.update_bullets(bullets)
# gf.update_screen(ai_settings, screen, ship, alien, bullets)
# run_game()

# Программа импортирует новый класс Alien и создает экземпляр Alien непосред-
# ственно перед входом в основной цикл while. Так как позиция пришельца еще
# не успела измениться, ничего нового в цикле не добавляется; изменения вносятся
# только в вызов update_screen(), которому передается экземпляр alien.

# -------------------------------------------------------------------------------------------------------------------

# Отображение пришельца на экране

# Чтобы пришелец появился на экране, программа вызывает его метод blitme()
# в update_screen():

# game_functions.py

# def update_screen(ai_settings, screen, ship, alien, bullets):
#     """При каждом прохождение цикла перерисовывается экран."""
#     screen.fill(ai_settings.bg_color)
#     ship.blitme()
#     alien.blitme()
#
#     # Все пули выводятся позади изображения корабля и пришельцев.
#     for bullet in bullets.sprites():
#         bullet.draw_bullet()

# Отображение последнего прорисованного экрана.
# pygame.display.flip()

# Пришелец выводится после прорисовки корабля и пуль, так что пришельцы будут
# находиться на верхнем «слое» экрана. На рис. 13.2 изображен первый пришелец.
# После того как первый пришелец появится на экране, мы напишем код для вывода
# всего флота.

# --------------------------------------------------------------------------------------------------------------------

# Построение флота

# Чтобы нарисовать флот пришельцев, необходимо вычислить, сколько пришельцев
# поместится в одном ряду и сколько рядов поместится по высоте. Сначала мы вы-
# числим горизонтальные интервалы между пришельцами и создадим ряд; затем
# будет вычислен вертикальный интервал и создан весь флот.

# Вычисление количества пришельцев в одном ряду

# Чтобы определить, сколько пришельцев помещается в одном ряду, сначала вы-
# числим доступное горизонтальное пространство. Ширина экрана хранится в ai_
# settings.screen_width, но с обеих сторон экрана необходимо зарезервировать
# пустые интервалы. Определим их равными ширине одного пришельца. Так как
# ширина уменьшается на величину двух интервалов, доступное пространство равно
# ширине экрана за вычетом удвоенной ширины пришельца:
# available_space_x = ai_settings.screen_width — (2 * alien_width)
# Также необходимо зарезервировать интервалы между пришельцами; они будут со-
# ставлять одну ширину пришельца. Пространство, необходимое для вывода одного
# пришельца, равно его удвоенной ширине: одна ширина для самого пришельца и еще
# одна для пустого интервала справа. Чтобы определить количество пришельцев на
# экране, разделим доступное пространство на удвоенную ширину пришельца:
# number_aliens_x = available_space_x / (2 * alien_width)
# Эти вычисления будут включены в программу при создании флота.

# ПРИМЕЧАНИЕ
# У вычислений в программировании есть одна замечательная особенность: не обязательно быть
# полностью уверенным в правильности формулы, когда вы ее пишете. Вы можете опробовать
# формулу на практике и посмотреть, что из этого получится. В худшем случае получится экран,
# до отказа
# забитый пришельцами, — или наоборот, пустой. В этом случае вы пересмотрите формулу
# на основании полученных результатов.

# --------------------------------------------------------------------------------------------------------------

# Создание ряда
#
# Чтобы создать один ряд пришельцев, сначала создадим в alien_invasion.py пустую
# группу с именем aliens для хранения всех пришельцев, а затем вызовем функцию
# в game_functions.py для создания флота:
# alien_invasion.py
#
# import pygame
#
# from pygame.sprite import Group
# from settings import Settings
# from ship import Ship
# import game_functions as gf
# def run_game():
# ...
# # Создание корабля, группы пуль и группы пришельцев.
# ship = Ship(ai_settings, screen)
# bullets = Group()
#  aliens = Group()
# # Создание флота пришельцев.
#  gf.create_fleet(ai_settings, screen, aliens)
# # Запуск основного цикла игры.
# while True:
# ...
#  gf.update_screen(ai_settings, screen, ship, aliens,
# bullets)
# run_game()
#
# Так как пришельцы уже не создаются напрямую в alien_invasion.py, импортировать
# класс Alien в этот файл не обязательно.
# Создайте пустую группу для хранения всех пришельцев в игре . Затем создайте
# новую функцию create_fleet() , которую мы вскоре вызовем, и передайте ей
# ai_settings, объект screen и пустую группу aliens. Затем измените вызов update_
# screen(), чтобы предоставить функции доступ к группе пришельцев .
# Также необходимо внести изменения в update_screen():
#
# game_functions.py
#
# def update_screen(ai_settings, screen, ship, aliens, bullets):
# ...
# ship.blitme()
# aliens.draw(screen)
# # Отображение последнего прорисованного экрана.
# pygame.display.flip()
# Когда вы вызываете метод draw() для группы, Pygame автоматически выводит
# каждый элемент группы в позиции, определяемой его атрибутом rect. В дан-
# ном случае вызов aliens.draw(screen) рисует каждого пришельца в группе
# на экране.
