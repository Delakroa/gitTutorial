# Файлы и исключения

# Чтение из файла

# Гигантские объемы данных доступны в текстовых файлах. В них могут храниться
# погодные данные, социально-экономическая информация, литературные произ-
# ведения и многое другое. Чтение из файла особенно актуально для приложений,
# предназначенных для анализа данных, но оно также может пригодиться в любой
# ситуации, требующей анализа или изменения информации, хранящейся в фай-
# ле. Например, программа может читать содержимое текстового файла и пере-
# писывать его с форматированием, рассчитанным на отображение информации
# в браузере.
# Работа с информацией в текстовом файле начинается с чтения данных в память.
# Вы можете прочитать все содержимое файла или же читать данные по строкам.

# --------------------------------------------------------------------------------------------------------------------

# Чтение всего файла

# Для начала нам понадобится файл с несколькими строками текста. Пусть это будет
# файл с числом «пи» с точностью до 30 знаков, по 10 знаков на строку:

# 3.1415926535
# 8979323846
# 2643383279

# Чтобы опробовать эти примеры, либо введите данные в редакторе и сохраните файл
# с именем pi_digits.txt, либо загрузите файл из ресурсов книги на странице https://
# www.nostarch.com/pythoncrashcourse/. Сохраните файл в каталоге, в котором будут
# храниться программы этой главы.
# Следующая программа открывает этот файл, читает его и выводит содержимое
# на экран:

# with open('D:\Python library\pi_digits.txt') as file_object:
#     contents = file_object.read()
#     print(contents)


# В первой строке этой программы многое заслуживает вашего внимания. Начнем
# с функции open(). Чтобы выполнить любые операции с файлом — даже просто
# вывести его содержимое, — сначала необходимо открыть файл. Функция open()
# получает один аргумент: имя открываемого файла. Python ищет файл с указанным
# именем в каталоге, в котором находится файл текущей программы. В данном при-
# мере выполняется программа file_reader.py, поэтому Python ищет файл pi_digits.txt
# в каталоге, в котором хранится file_reader.py. Функция open() возвращает объект,
# представляющий файл. В данном случае open('pi_digits.txt') возвращает объ-
# ект, представляющий файл pi_digits.txt. Python сохраняет этот объект в переменной
# file_object, с которой мы будем работать позднее в программе.
# Конструкция с ключевым словом with закрывает файл после того, как надобность
# в нем отпадет. Обратите внимание: в этой программе есть вызов open(), но нет
# вызова close(). Файлы можно открывать и закрывать явными вызовами open()
# и close(); но если из-за ошибки в программе команда close() останется невыпол-
# ненной, то файл не будет закрыт. На первый взгляд это не страшно, но некоррект-
# ное закрытие файлов может привести к потере или порче данных. А если функция
# close() будет вызвана слишком рано, программа попытается работать с закрытым
# (то есть недоступным) файлом, что приведет к новым ошибкам. Не всегда можно
# заранее определить, когда нужно закрывать файл, но с приведенной конструкцией
# Python сделает это за вас. Вам остается лишь открыть файл и работать с ним так,
# как требуется, надеясь на то, что Python закроет его автоматически в правильный
# момент.
# После того как в программе появится объект, представляющий файл pi_digits.txt, во
# второй строке программы используется метод read(), который читает все содер-
# жимое файла и сохраняет его содержимое в одной длинной строке в переменной
# Чтение из файла 187
# contents. При выводе значения contents на экране появляется все содержимое
# файла :

# 3.1415926535
# 8979323846
# 2643383279

# Единственное различие между выводом и исходным файлом — лишняя пустая
# строка в конце вывода. Откуда она взялась? Метод read() возвращает ее при чте-
# нии, если достигнут конец файла. Если вы хотите удалить лишнюю пустую строку,
# включите вызов rstrip() в команду print:

with open('D:\Python library\pi_digits.txt') as file_object:
    contents = file_object.read()
    print(contents.rstrip())

# Напомним, что метод rstrip() удаляет все пропуски в конце строки. Теперь вывод
# точно соответствует содержимому исходного файла:

# --------------------------------------------------------------------------------------------------------------------