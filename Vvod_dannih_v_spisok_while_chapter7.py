# Как работает функция input()

# Функция input() приостанавливает выполнение программы и ожидает, пока
# пользователь введет некоторый текст. Получив ввод, Python сохраняет его в пере-
# менной, чтобы вам было удобнее работать с ним.
# Например, следующая программа предлагает пользователю ввести текст, а затем
# выводит сообщение для пользователя:

# messege = input("Скажи мне что нибудь и я это повторю вам: ")
# print(messege)

# --------------------------------------------------------------------------------------------------------------------

# Содержательные подсказки

# Каждый раз, когда в вашей программе используется функция input(), вы должны
# включать четкую, понятную подсказку, которая точно сообщит пользователю,
# какую информацию вы от него хотите получить. Подойдет любое предложение,
# которое сообщает пользователю, что нужно вводить. Пример:

# name = input("Пожадуйста введите ваше имя: ")
# print("Привет, " + name.title() + "!")


# promt = "Если вы сообщите нам, кто вы, мы сможем персонализировать сообщения, которое вы видите."
# promt += "\nКак тебя зовут? "  # оператор += обьединяет текст хранящийся в переменной prompt
#
# name = input(promt)
# print("\nПривет, " + name + "!")

# -----------------------------------------------------------------------------------------------------------------

# Использование int() для получения числового ввода:

# height = input("Какой у вас рост в дюймах? ")
# height = int(height)
# if height >= 36:
#     print("\nВы достаточно высоки, чтобы ездить верхом!")
# else:
#     print("\nВы сможете ездить верхом, когда станете немного старше. ")

# Если пользователь вводит числовые данные, которые используются в вашей про-
# грамме для вычислений и сравнений, обязательно преобразуйте введенное значение
# в его числовой эквивалент.

# ----------------------------------------------------------------------------------------------------------------------

# При работе с числовыми данными может пригодиться оператор вычисления остат-
# ка (%), который делит одно число на другое и возвращает остаток:

# Оператор % не сообщает частное от целочисленного деления; он возвращает только
# остаток.
# Когда одно число нацело делится на другое, остаток равен 0, и оператор % возвра-
# щает 0. Например, этот факт может использоваться для проверки четности или
# нечетности числа:

# number = input("Введите число, и я скажу его чётное или нечётное: ")
# number = int(number)
#
# if number % 2 == 0:
#     print("\nНомер " + str(number) + " чётное.")
# else:
#     print("\nНомер " + str(number) + " нечётный.")

# ---------------------------------------------------------------------------------------------------------------------

# 7-1. Прокат машин: напишите программу, которая спрашивает у пользователя, какую ма-
# шину он хотел бы взять напрокат. Выведите сообщение с введенными данными (например,
# “Дай мне посмотреть, найду ли я тебе Субару”).

# cars = input("какую машину вы хотели бы взять напрокат? ")
# print("\nДай мне посмотреть, найду ли я тебе " + cars)

# --------------------------------------------------------------------------------------------------------------------

# 7-2. Заказ стола: напишите программу, которая спрашивает у пользователя, на сколько
# мест он хочет забронировать стол в ресторане. Если введенное число больше 8, выведите
# сообщение о том, что пользователю придется подождать. В противном случае сообщите,
# что стол готов.

# book_your_place = input("На какое сколько мест вы хотите забронировать стол в ресторане: ")
# book_your_place = int(book_your_place)
# if book_your_place > 8:
#     print("Извините, но вам придётся подождать ")
# else:
#     print("Столы свободны ")

# -------------------------------------------------------------------------------------------------------------------

# 7-3. Числа, кратные 10: запросите у пользователя число и сообщите, кратно оно 10 или нет.

# numbers = input("Введите число: ")
# numbers = int(numbers)
#
# if numbers % 10 == 0:
#     print("Число кратное")
# else:
#     print("Число не кратное")

