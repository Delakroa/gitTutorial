# Возьмем игру с инопланетными пришельцами, которые имеют разные цвета и при-
# носят разное количество очков игроку. В следующем простом словаре хранится
# информация об одном конкретном пришельце:

# alien_0 = {'color': 'green', 'points': 5}
# print(alien_0['color'])
# print(alien_0['points'])


# Теперь программа может получить значение, связанное с любым из ключей
# в alien_0: color или points. Если игрок сбивает корабль пришельца, для получения
# заработанных им очков может использоваться код следующего вида:

# alien_0 = {'color': 'green', 'points': 5}
# new_points = alien_0['points']
# print('Ты только что заработал ' + str(new_points) + ' points!')
# print('Ты только что заработал ' + str(alien_0['points']) + ' points') # мой варинат для понимания и закрепления

# -------------------------------------------------------------------------------------------------------------------

# Добавление новых пар "ключ - значение"

# Словари относятся к динамическим структурам данных: в словарь можно в любой
# момент добавлять новые пары «ключ—значение». Для этого указывается имя сло-
# варя, за которым в квадратных скобках следует новый ключ с новым значением.
# Добавим в словарь alien_0 еще два атрибута: координаты x и y для вывода изобра-
# жения пришельца в определенной позиции экрана. Допустим, пришелец должен
# отображаться у левого края экрана, в 25 пикселах от верхнего края. Так как система
# экранных координат обычно располагается в левом верхнем углу, для размещения
# пришельца у левого края координата x должна быть равна 0, а координата y — 25:

# alien_0 = {'color': 'green', 'points': 5}
# print(alien_0)
#
# alien_0['x_position'] = 0
# alien_0['y_position'] = 25
# print(alien_0)


# ---------------------------------------------------------------------------------------------------------------------

# Создание пустого словаря

# В некоторых ситуациях бывает удобно (или даже необходимо) начать с пустого
# словаря, а затем добавлять в него новые элементы. Чтобы начать заполнение пу-
# стого словаря, определите словарь с пустой парой фигурных скобок, а затем добав-
# ляйте новые пары «ключ—значение» (каждая пара в отдельной строке). Например,
# вот как строится словарь alien_0:

# alien_0 = {}
#
# alien_0['color'] = 'green'
# alien_0['points'] = 5
#
# print(alien_0)


# ------------------------------------------------------------------------------------------------------------------

# Изменение значений в словаре

# Чтобы изменить значение в словаре, укажите имя словаря с ключом в квадратных
# скобках, а затем новое значение, которое должно быть связано с этим ключом. До-
# пустим, в процессе игры цвет пришельца меняется с зеленого на желтый:

# alien_0 = {'color': 'green'}
# print("Пришелец сейчас " + alien_0['color'] + ".")
#
# alien_0['color'] = 'yelow'
# print('Пришелец сейчас ' + alien_0['color'] + '.')

# Ещё один пример поинтересней

# alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'fast', }
# print("Original x_position: " + str(alien_0['x_position']))
# Пришелец перемещается в право.
# Вычесляем величину смещения на основании текущей скорости.

# if alien_0['speed'] == 'slow':
#     x_increment = 1
# elif alien_0['speed'] == 'medium':
#     x_increment = 2
# else:
#     x_increment = 3  # Пришелец двигается быстро.
# alien_0['x_position'] = alien_0['x_position'] + x_increment  # Новая позиция равна сумме позиций иприращения.
# print("New x-position: " + str(alien_0['x_position']))

# ---------------------------------------------------------------------------------------------------------------------

# Удаление пар «ключ—значение»

# Когда информация, хранящаяся в словаре, перестает быть ненужной, пару «ключ—
# значение» можно полностью удалить при помощи команды del. При вызове до-
# статочно передать имя словаря и удаляемый ключ.
# Например, в следующем примере из словаря alien_0 удаляется ключ 'points'
# вместе со значением:

# alien_0 = {'color': 'green', 'point': 5}
# print(alien_0)
#
# del alien_0['point']
# print(alien_0)

# ---------------------------------------------------------------------------------------------------------------------

# Словарь с однотипным обьектами

# favorite_languages = {
#     'alex': 'python',
#     'den': 'c',
#     'andry': 'ruby',
#     'dimon': 'python',
# }
#
# print('dimon твой любимый язык программирования ' +
#       favorite_languages['dimon'].title() +
#       '.')
# ------------------------------------------------------------------------------------------------------------------

# 6-1. Человек: используйте словарь для сохранения информации об известном вам чело-
# веке. Сохраните имя, фамилию, возраст и город, в котором живет этот человек. Словарь
# должен содержать ключи с такими именами, как first_name, last_name, age и city. Выведите
# каждый фрагмент информации, хранящийся в словаре.


# passpor = {
#     'first_name': 'mitry',
#     'last_name': 'malikov',
#     'age': 1000,
#     'city': 'mukhosransk'
# }
#
# print(passpor)

# ------------------------------------------------------------------------------------------------------------------

# 6-2. Любимые числа: используйте словарь для хранения любимых чисел. Возьмите пять
# имен и используйте их как ключи словаря. Придумайте любимое число для каждого чело-
# века и сохраните его как значение в словаре. Выведите имя каждого человека и его люби-
# мое число. Чтобы задача стала более интересной, опросите нескольких друзей и соберите
# реальные данные для своей программы.

# razriadi = {
#     'slavik': 100,
#     'vova': 15,
#     'oleg': 7,
#     'alex': 1000,
#     'den': 0,
# }
# print(razriadi)


# 6-3. Глоссарий: словари Python могут использоваться для моделирования «настоящего»
# словаря (чтобы не создавать путаницы, назовем его «глоссарием»).
# • Вспомните пять терминов из области программирования, которые вы узнали
# в предыдущих главах. Используйте эти слова как ключи глоссария, а их определения — как
# значения.
# • Выведите каждое слово и его определение в аккуратно отформатированном виде.
# Например, вы можете вывести слово, затем двоеточие и определение; или же слово
# в одной строке, а его определение — с отступом в следующей строке. Используйте
# символ новой строки (\n) для вставки пустых строк между парами «слово-определе-
# ние» в выходных данных.

# glossary = {
#     "конкатэнация": "cложение",
#     "коммит": "сохранять скрин кода",
#     "пушить": "скидывать на свервер",
#     "пулить": "скачивать с сервера",
#     "итерация": "повторение",
# }
# for key, value in glossary.items():  # В данном примере показывается как вывести на экран все пары этой -
#     print(key, ":", value)  # коллекции в формате ключ : значение. Для этого используется цикл for и функция -
# items, работающая с элементами словаря.

# ------------------------------------------------------------------------------------------------------------

# ПЕРЕБОР СЛОВАРЯ:

# Словарь Python может содержать как несколько пар «ключ—значение», так и мил-
# лионы таких пар. Поскольку в словаре может храниться большой объем данных,
# Python предоставляет средства для перебора элементов словаря. Информация
# может храниться в словарях по-разному, поэтому предусмотрены разные способы
# перебора. Программа может перебрать все пары «ключ—значение» в словаре, толь-
# ко ключи или только значения.

# Перебор всех пар «ключ—значение»

# user_0 = {
#     "username": "efermi",
#     "firstname": "enrico",
#     "last": "fermi",
# }
# for key, value in user_0.items():
#     print("\nKey: " + key)
#     print("Value " + value)
#     print(key, ":", value)

