# 11 Тестирование

# Вместе с функциями и классами вы также можете написать тесты для своего кода.
# Тестирование доказывает, что код работает так, как положено, для любых разно-
# видностей входных данных, которые он может получать. Тесты позволят вам быть
# уверенным в том, что код будет работать правильно и тогда, когда вашими про-
# граммами станут пользоваться другие люди. Тестирование при добавлении нового
# кода гарантирует, что внесенные изменения не повлияют на текущее поведение
# программы. Все программисты допускают ошибки, поэтому каждый программист
# должен часто тестировать свой код и выявлять ошибки до того, как с ними столкнутся
# другие пользователи.
# В этой главе вы научитесь тестировать код средствами модуля Python unittest.
# Вы узнаете, как построить тестовые сценарии, как проверить, выдает ли программа
# для конкретных входных данных ожидаемый результат и как тестировать функ-
# ции и классы. Также вы научитесь оценивать, сколько тестов нужно написать для
# проекта.

# ---------------------------------------------------------------------------------------------------------------------

# Тестирование функции

# Чтобы потренироваться в тестировании, нам понадобится код. Ниже приведена
# простая функция, которая получает имя и фамилию и возвращает отформатиро-
# ванное полное имя:

def get_formatted_name(first, last):
    """Строит отформатированное полное имя"""
    full_name = first + ' ' + last
    return full_name.title()


# Функция get_formatted_name() строит полное имя из имени и фамилии, разде-
# лив их пробелом, преобразует первый символ каждого слова к верхнему регистру
# и возвращает полученный результат. Чтобы убедиться в том, что функция get_
# formatted_name() работает правильно, мы напишем программу, использующую
# эту функцию. Программа names.py запрашивает у пользователя имя и фамилию
# и выдает отформатированное полное имя:

# from name_function import get_formatted_name


# print("Введите 'q' для выхода в любое время. ")
# while True:
#     first = input("Пожалуйста введите ваше имя: ")
#     if first == "q":
#         break
#     last = input("Введите пожалуйста вашу фамилию: ")
#     print("")
#     if last == "q":
#         break
#     formatted_name = get_formatted_name(first, last)
#     print("\tАккуратно отформатированное имя: " + formatted_name + '.')

# Программа импортирует функцию g e t _ f o r m a t t e d _ n a m e ( ) из модуля

# name_function.py. Пользователь вводит последовательность имен и фамилий
# и видит,
# что программа сгенерировала отформатированные полные имена:
#
#
# Enter 'q' at any time to quit.
# Please give me a first name: janis
# Please give me a last name: joplin
# Neatly formatted name: Janis Joplin.
# Please give me a first name: bob
# Please give me a last name: dylan
# Neatly formatted name: Bob Dylan.
# Please give me a first name: q

# Как видно из листинга, имена сгенерированы правильно. Но допустим, вы решили
# изменить функцию get_formatted_name(), чтобы она также работала со вторыми
# именами. При этом необходимо проследить за тем, чтобы функция не перестала
# правильно работать для имен, состоящих только из имени и фамилии. Чтобы про-
# тестировать код, можно запустить names.py и для проверки вводить имя из двух
# компонентов (скажем, Janis Joplin) при каждом изменении get_formatted_name(),
# но это довольно утомительно. К счастью, Python предоставляет эффективный
# механизм автоматизации тестирования вывода функций. При автоматизации те-
# стирования get_formatted_name() вы будете уверены в том, что функция успешно
# работает для всех видов имен, для которых написаны тесты.

# -------------------------------------------------------------------------------------------------------------------

# Прохождение теста

# Вы не сразу привыкнете к синтаксису создания тестовых сценариев, но после того,
# как тестовый сценарий будет создан, вы сможете легко добавить новые модульные
# тесты для своих функций. Чтобы написать тестовый сценарий для функции, импор-
# тируйте модуль unittest и функцию, которую необходимо протестировать. Затем
# создайте класс, наследующий от unittest.TestCase, и напишите серию методов для
# тестирования различных аспектов поведения своей функции.
# Ниже приведен тестовый сценарий с одним методом, который проверяет, что функ-
# ция get_formatted_name() правильно работает при передаче имени и фамилии: