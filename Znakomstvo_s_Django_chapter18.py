# Знакомство с Django
#
# Современные веб-сайты в действительности представляют собой многофункциональные
# приложения, достаточно близкие к полноценным приложениям для
# настольных систем. Python содержит богатый набор инструментов для постро-
# ения веб-приложений. В этой главе вы научитесь использовать Django (http://
# djangoproject.com/) для построения проекта Learning Log — сетевой журнальной
# системы для отслеживания информации, полученной вами по определенной теме.
# Мы напишем спецификацию для этого проекта, а затем определим модели для
# данных, с которыми будет работать приложение. Мы воспользуемся администра-
# тивной системой Django для ввода некоторых начальных данных, а затем научимся
# писать представления и шаблоны, на базе которых Django будет строить страницы
# нашего сайта.
# Django представляет собой веб-инфраструктуру — набор инструментов для постро-
# ения интерактивных веб-сайтов. Django может реагировать на запросы страниц,
# упрощает чтение и запись информации в базы данных, управление пользователями
# и многие другие операции. В главах 19 и 20 мы доработаем проект Learning Log,
# а затем развернем его на сервере, чтобы вы (и ваши друзья) могли использовать их.

# --------------------------------------------------------------------------------------------------------------------

# Подготовка к созданию проекта

# В начале работы над проектом необходимо описать проект в спецификации. Затем
# вы создадите виртуальную среду для построения проекта.

# --------------------------------------------------------------------------------------------------------------------

# Написание спецификации

# В полной спецификации описываются цели проекта, его функциональность,
# а также внешний вид и интерфейс пользователя. Как и любой хороший проект
# или бизнес-план, спецификация должна сосредоточиться на самых важных аспек-
# тах и обеспечивать планомерную разработку проекта. Здесь мы не будем писать
# полную спецификацию, а сформулируем несколько четких целей, которые будут
# задавать направление процесса разработки. Вот как выглядит спецификация:
# Мы напишем веб-приложение с именем Learning Log, при помощи которого пользователь сможет
# вести журнал интересующих его тем и создавать записи в журнале во время изучения каждой
# темы. Домашняя страница Learning Log содержит описание сайта и приглашает пользователя заре-
# гистрироваться либо ввести свои учетные данные. После успешного входа пользователь получает
# возможность создавать новые темы, добавлять новые записи, читать и редактировать существующие
# записи.
# Во время изучения нового материала бывает полезно вести журнал того, что вы
# узнали, — записи пригодятся для контроля и возвращения к необходимой инфор-
# мации. Хорошее приложение повышает эффективность этого процесса.

# ------------------------------------------------------------------------------------------------------------------

# Создание виртуальной среды
#
# Для работы с Django необходимо сначала создать виртуальную среду для работы.
# Виртуальная среда представляет собой подраздел системы, в котором вы можете
# устанавливать пакеты в изоляции от всех остальных пакетов Python. Отделение
# библиотек одного проекта от других проектов принесет пользу при развертывании
# Learning Log на сервере в главе 20.
# Создайте для проекта новый каталог с именем learning_log, перейдите в этот
# каталог
# в терминальном режиме и создайте виртуальную среду. Если вы работаете
# в Python 3, то сможете создать виртуальную среду следующей командой:
# learning_log$ python -m venv ll_env
# learning_log$
# Команда запускает модуль venv и использует его для создания виртуальной среды
# с именем ll_env. Если этот способ сработал, переходите к разделу «Активизация
# виртуальной среды» на с. 382. Если что-то не получилось, прочитайте следующий
# раздел — «Установка virtualenv».

# ------------------------------------------------------------------------------------------------------------------

# Установка virtualenv
#
# Если вы используете более раннюю версию Python или ваша система не настроена
# для правильного использования модуля venv, установите пакет virtualenv. Уста-
# новка virtualenv выполняется следующей командой:
#
# $ pip install --user virtualenv
#
# Возможно, вам придется использовать слегка измененную версию этой команды.
# (Если вы еще не использовали pip, обратитесь к разделу «Установка пакетов Python
# с использованием pip» на с. 227.)
#
# ПРИМЕЧАНИЕ
# Если вы используете Linux, но и этот способ не сработал, установите virtualenv при помощи менед-
# жера пакетов своей системы. Например, в Ubuntu для установки virtualenv используется команда
# sudo apt-get install python-virtualenv.
# Перейдите в каталог learning_log в терминальном окне и создайте виртуальную
# среду следующей командой:
#
# learning_log$ virtualenv ll_env
# New python executable in ll_env/bin/python
# Installing setuptools, pip...done.
# learning_log$

# ПРИМЕЧАНИЕ
# Если в вашей системе установлено несколько версий Python, укажите версию, которая должна ис-
# пользоваться virtualenv. Например, команда virtualenv ll_env --python=python3 создаст виртуальную
# среду, которая использует Python 3.

# ------------------------------------------------------------------------------------------------------------------

# Активизация виртуальной среды
#
# После того как виртуальная среда будет создана, ее необходимо активизировать
# следующей командой:
#
# learning_log$ source ll_env/bin/activate
#  (ll_env)learning_log$
#
# Команда запускает сценарий activate из каталога ll_env/bin. Когда среда активизирует-
# ся, ее имя выводится в круглых скобках ; теперь вы можете устанавливать пакеты
# в среде и использовать те пакеты, что были установлены ранее. Пакеты, установлен-
# ные в ll_env, будут доступны только в то время, пока среда остается активной.
#
# ПРИМЕЧАНИЕ
# Если вы работаете в системе Windows, используйте команду ll_env\Scripts\activate (без слова
# source) для активизации виртуальной среды.
#
# Чтобы завершить использование виртуальной среды, введите команду deactivate:
#
# (ll_env)learning_log$ deactivate
# learning_log$
#
# Среда также становится неактивной при закрытии терминального окна, в котором
# она работает.

# ------------------------------------------------------------------------------------------------------------------

# Установка Django
#
# После того как вы создали свою виртуальную среду и активизировали ее, устано-
# вите Django:
#
# (ll_env)learning_log$ pip install Django
# Installing collected packages: Django
# Successfully installed Django
# Cleaning up...
# (ll_env)learning_log$
#
# Так как вы работаете в виртуальной среде, эта команда выглядит одинаково во всех
# системах. Использовать флаг --user не нужно, как и использовать более длинные
# команды вида python -m pip install имя_пакета.
# Помните, что с Django можно работать только в то время, пока среда остается
# активной.

# ------------------------------------------------------------------------------------------------------------------

# Создание проекта в Django

# Не выходя из активной виртуальной среды (пока ll_env выводится в круглых
# скобках), введите следующие команды для создания нового проекта:
#
#  (ll_env)learning_log$ django-admin startproject learning_log .
#  (ll_env)learning_log$ ls
# learning_log ll_env manage.py
#  (ll_env)learning_log$ ls learning_log
# __init__.py settings.py urls.py wsgi.py
#
# Команда  приказывает Django создать новый проект с именем learning_log.
# Точка в конце команды создает новый проект со структурой каталогов, которая
# упрощает развертывание приложения на сервере после завершения разработки.
#
# ПРИМЕЧАНИЕ
# Не забывайте про точку, иначе у вас могут возникнуть проблемы с конфигурацией при разверты-
# вании приложения. А если вы все же забыли, удалите созданные файлы и папки (кроме ll_env)
# и снова выполните команду.
#
# Команда ls (dir в Windows)  показывает, что Django создает новый каталог с име-
# нем learning_log. Также создается файл manage.py — короткая программа, которая
# получает команды и передает их соответствующей части Django для выполнения.
# Мы используем эти команды для управления такими задачами, как работа с базами
# данных и запуск серверов.
# В каталоге learning_log находятся четыре файла , важнейшими из которых явля-
# ются файлы settings.py, urls.py и wsgi.py. Файл settings.py определяет то, как Django
# взаимодействует с вашей системой и управляет вашим проектом. Мы изменим
# некоторые из существующих настроек и добавим несколько новых настроек в ходе
# разработки проекта. Файл urls.py сообщает Django, какие страницы следует строить
# в ответ на запросы браузера. Файл wsgi.py помогает Django предоставлять создан-
# ные файлы (имя файла является сокращением от «Web Server Gateway Interface»).


# ------------------------------------------------------------------------------------------------------------------

# Создание базы данных   383

